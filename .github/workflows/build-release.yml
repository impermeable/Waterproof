name: build-release
on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Version number (must be v[0-9]+\.[0-9]+\.[0-9]+), for example: v0.5.5'
        required: true

jobs:
  set-version:
    runs-on: ubuntu-latest
    name: "Set version number"
    steps:
      - name: validate tag
        id: check-tag
        run: |
          if [[ ${{github.event.inputs.tag}} =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              echo ::set-output name=match::true
          fi
      - name: bad tag
        if: steps.check-tag.outputs.match != 'true'
        run: exit 1
      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: small-npm-deps-ubuntu-latest-${{ hashFiles('**/package-lock.json') }}
          restore-keys: small-npm-deps-ubuntu-latest
      - uses: actions/checkout@v3
        with:
          ref: 'develop'
      - name: Setup git
        run: |
          git config --global user.email "waterproofdev@gmail.com"
          git config --global user.name "WaterproofBot"
      - name: set tag
        run: "npm version ${{github.event.inputs.tag}} --git-tag-version -m \"Bumped version number to %s\" || :"
      - name: push tag
        run: git push

  lint-test-run:
    needs: [set-version]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-11]
        with_installer: [false]

        include:
          - os: windows-latest
            with_installer: true

    runs-on: ${{ matrix.os }}
    name: Build for ${{ matrix.os }} installer ${{ matrix.with_installer && 'with bundled installer' || '' }}
    steps:
      - uses: actions/checkout@v2
        with:
          ref: 'develop'
      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: small-npm-deps-${{ matrix.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: small-npm-deps-${{ matrix.os }}
      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '12.x'
      - run: npm ci
      - name: Generate icons
        run: npm run electron:generate-icons

      - name: Download installer
        if: ${{ matrix.with_installer == true }}
        uses: robinraju/release-downloader@v1.6
        with:
          repository: "impermeable/waterproof-dependencies-installer"
          latest: true
          fileName: "*.exe"

      - name: Rename installer
        if: ${{ matrix.with_installer == true }}
        run: Get-ChildItem Coq-*x86_64.exe | Rename-Item -NewName Coq-Waterproof-installer.exe

      - name: Build it (signed)
        if: ${{ matrix.os == 'windows-latest' }}
        env:
          CSC_LINK: 'certificate\certificate.pfx'
          CSC_KEY_PASSWORD: ${{ secrets.CODE_SIGNING_CERTIFICATE_PASS }}
          WATERPROOF_BUILD_WITH_BUNDLED_INSTALLER: ${{ matrix.with_installer }}
        run: |
          New-Item -ItemType directory -Path certificate
          Set-Content -Path certificate\certificate.txt -Value '${{ secrets.CODE_SIGNING_CERTIFICATE }}'
          certutil -decode certificate\certificate.txt certificate\certificate.pfx
          npm run electron:build
          Remove-Item -Path certificate\*

      - name: Build it (no signing)
        if: ${{ matrix.os != 'windows-latest' }}
        env:
          WATERPROOF_BUILD_WITH_BUNDLED_INSTALLER: ${{ matrix.with_installer }}
        run: npm run electron:build

      - name: Prepare release name
        id: prepname
        uses: actions/github-script@0.9.0
        with:
          script: |
            const name = context.payload.inputs.tag.substring(1);
            core.setOutput('name', name)
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "${{github.event.inputs.tag}}"
          name: "Waterproof ${{steps.prepname.outputs.name}}"
          body: "No changelog provided (yet)."
          prerelease: false
          draft: false
          files: |
            dist_electron/*.AppImage
            dist_electron/*.exe
            dist_electron/*.dmg
